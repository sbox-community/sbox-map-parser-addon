@using System;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Diagnostics;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;


@namespace MapParser
@inherits Panel

<style>
	
	ExternalMapList {
		width:75%;
		height: 94%;
		max-width:75%;
		border-radius: 2px;
		flex-direction: column;
		flex-wrap: nowrap;
		margin:10px;
		box-shadow: 0px 0px 10px 2px rgba(25, 25, 25, 0.9);

		.rowHeader{
			background: linear-gradient(to top, #ffe259, #ffa751);
			width:100%;
			height: 5%;
			flex-direction:row;

			.rowHeader_item{
				width:100%;
				height:100%;
				justify-content:center;
				border-bottom-width:1px;
				border-left-width:1px;
				border-color:black;
				&:nth-child(1) {
					border-left-width: 0px;
				}
			}
		}
		.row{
			overflow:scroll;
			background-color:#afafaf;
			width:100%;
			height: 88%;
			flex-direction:column;
		
			.rowItem{
				width:100%;
				height:5%;
				max-height: 5%;
				flex-shrink:0;
				justify-content:center;
				border-bottom-width:1px;
				border-color:black;

				&.True
				{
						background: linear-gradient(to bottom, #ff6a6a, #ff1f1f);
						&:hover{
							background: none;
							background-color: #fd4646;
						}
				}
				&.False
				{
						background: linear-gradient(to bottom, #898989, #a4a4a4);
						&:hover{
							background: none;
							background-color: gray;
						}
				}
			}
	}
	.pagination{
		flex-shrink:0;
		flex-direction:row;
		height:5%;
		flex-wrap:wrap;
		justify-content:center;

		.button{
			min-width:2%;
			min-height:1%;
			margin: 3px;
			&.True
			{
				font-color:red;
				font-size:14px;
				font-weight:1000;
			}
		}
	}
}
</style>

<div class="rowHeader">
	<div class="rowHeader_item">Maps</div>
</div>
<div class="row">
	@if (maps.Count() != 0)
	{
		@for(var i = (limit*page); i < (limit*(page+1)); i++)
		{
			@if (maps.Count() <= i)
				break;

			var map = maps[i];
			<div class="rowItem @(selectedMap.Equals(map))" @onclick=@(() => selectRow(map))>@(map)</div>
		}
	}
	@if (maps.Count() == 0)
	{
		<div class="rowItem">Not Found</div>
	}
</div>
<div class="pagination">
@for (var i = 0; i < Math.Ceiling((float)maps.Count() / (float)limit); i++)
{
	<Button id="@i" style="@(page==i ? "font-color:white;": "font-color:black;")" class="@(page==i)" @onclick=@((PanelEvent e) => changePage(e.This.Id.ToInt()))>@(i + 1)</Button>
}
</div>
@code
{
	int limit = 1000;
	int page = 0;
	public string selectedMap { get; set; } = "";

	public List<string> maps { get; set; }  = new List<string>();

	public override void Tick()
	{
		base.Tick();
	}
	protected override int BuildHash()
	{
		return HashCode.Combine(maps, selectedMap, page);
	}
	void selectRow(string selectedmap)
	{
		if (selectedmap != "Loading..")
			selectedMap = selectedmap;
	}
	public void changePage(int i) => page = i;
}
