<!-- sbox.Community © 2023-2024 -->

@using System;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Diagnostics;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;


@namespace MapParser
@inherits Panel

<style>
	
	TextureList {
		width:90%;
		height: 100%;
		border-radius: 2px;

		flex-direction: column;
		flex-wrap: nowrap;
		margin:10px;
		box-shadow: 0px 0px 10px 2px rgba(25, 25, 25, 0.9);
		flex-shrink: 0;

		.rowHeader{
			background: linear-gradient(to top, #ffe259, #ffa751);
			width:100%;
			height: 5%;
			flex-direction:row;
			max-height: 5%;
			min-height: 5%;

			.rowHeader_item{
				width:100%;
				height:100%;
				justify-content:center;
				border-bottom-width:1px;
				border-left-width:1px;
				border-color:black;
				&:nth-child(1) {
					border-left-width: 0px;
				}
			}
		}
		.row{
			overflow:scroll;
			background-color: #afafaf;
			width:100%;
			height: 100%;
			flex-direction:column;

			.rowItem{
				width:100%;
				height:15%;
				max-height:5%;
				min-height: 5%;
				justify-content:center;
				border-bottom-width:1px;
				border-color:black;
				&.True
				{
					background: linear-gradient(to bottom, #ff6a6a, #ff1f1f);
					&:hover{
						background: none;
						background-color: #fd4646;
					}
				}
				&.False
				{
					background: linear-gradient(to bottom, #898989, #a4a4a4);
					&:hover{
						background: none;
						background-color: gray;
					}
				}
			}

		}
}
</style>

<div class="rowHeader">
	<div class="rowHeader_item">Texture</div>
	@if (Render.TextureCache.textureData.Count() != 0) {
		<div style="width:43%" class="rowHeader_item">Size</div>
	}
</div>
<div class="row">
	@if (Render.TextureCache.textureData.Count() != 0)
	{
		@foreach (var textureCacheData in Render.TextureCache.textureData) // Need concurrentDictionary
		{
			<div class="rowItem @(selectedData.Equals(textureCacheData.Value))" @onclick=@(() => selectRow(textureCacheData.Value))><div style="width:70%;max-width:70%;min-width:70%;justify-content:center;">@(Util.PathToMapNameWithExtension(textureCacheData.Key))</div><div style="width:30%;max-width:30%;min-width:30%;justify-content:center">@(textureCacheData.Value.texture.Width)x@(textureCacheData.Value.texture.Height)</div></div>
		}
	}
	@if (Render.TextureCache.textureData.Count() == 0)
	{
		<div class="rowItem" style="justify-content:center">Not Cached Texture Found</div>
	}
</div>

@code
{
	Render.TextureCacheData selectedData;

	public Panel canvas;

	public override void Tick()
	{
		base.Tick();
	}
	protected override int BuildHash()
	{
		return HashCode.Combine(selectedData);
	}
	void selectRow(Render.TextureCacheData packagedata)
	{
		selectedData = packagedata;
		canvas.Style.SetBackgroundImage( packagedata.texture );
		canvas.Style.BackgroundRepeat = BackgroundRepeat.NoRepeat;
		canvas.Style.BackgroundSizeX = Length.Pixels(packagedata.texture.Width);
		canvas.Style.BackgroundSizeY = Length.Pixels(packagedata.texture.Height);
		canvas.Style.BackgroundPositionX = Length.Fraction((1f - (packagedata.texture.Width / 328f)) * 0.5f); //canvas.ComputedStyle.Width.Value.Value
		canvas.Style.BackgroundPositionY = Length.Fraction((1f - (packagedata.texture.Height / 328f)) * 0.5f);

		if (Manager.mainMenu != null && Manager.mainMenu.IsValid())
			(Manager.mainMenu as Menu).selectedWAD = packagedata.WADname;
	}
}
